#------------------------------------------------------------------------
# Source File Information (DO NOT MODIFY)
# Source ID: 37d2b869-3ed4-4ab2-bf34-848b73efd13f
# Source File: RaceDBController.psproj
#------------------------------------------------------------------------
#region Project Recovery Data (DO NOT MODIFY)
<#RecoveryData:
kgMAAB+LCAAAAAAABAClU11PgzAUfV+y/0D6aAKMj7gZGQ9zwSwxuozpqylwgWppSSlz89dbPqaY
+fGwl9ue29Nzem9bbwMx34E4LLHE/nikad5a8BeIpRYeWJwLzsg7JHMUYFoBapMBoRLEHF0YZWVd
N7HohqQbrH1B20naxkrFLpMDLQ25l6g1UlZPICrCmW8blmceQb+mXGC19J1pYkezyyvdgcTVXRzZ
epQ6rj5zZ9HUgTSxnNQze3K/ta9geyjBn3jmEB7FOU2UnWYO3aoe9FBb1ISqyifIDyUWsi6bYjqv
35hamGPRtGsratWtDaQggMUQ1CyWqrg5WrEdfwX9lvII02fVLOR386rp3F/qimlkRJKMcQH/HOMH
4zDnb/oGx7BcBFwUyjpF/hduruss0TueDTUVPFtyLY7L1VB6kD7b4rFMsAR7KN+nTqQ70D2Sz0fV
oQdBMsIwbQj3uIBe6YYzKTilIJRYqTZ45glzPPLMb3/wAyUORbeSAwAA#>
#endregion
<#
    .NOTES
    --------------------------------------------------------------------------------
     Code generated by:  SAPIEN Technologies, Inc., PowerShell Studio 2019 v5.6.170
     Generated on:       12/8/2019 10:26 PM
     Generated by:       Mark Buckaway
    --------------------------------------------------------------------------------
    .DESCRIPTION
        Script generated by PowerShell Studio 2019
#>



#region Source: Startup.pss
#region File Recovery Data (DO NOT MODIFY)
<#RecoveryData:
YQAAAB+LCAAAAAAABACzCUpNzi9LLap0SSxJVAAyijPz82yVjPUMlex4uRQUbPyLMtMz8xJz3DJz
Uv0Sc1PtgksSi0pKC/QKiott9DFkebls9JGNtAMAoyFkEGEAAAA=#>
#endregion
#----------------------------------------------
#region Import Assemblies
#----------------------------------------------
#endregion Import Assemblies

#Define a Param block to use custom parameters in the project
#Param ($CustomParameter)

function Main {
<#
    .SYNOPSIS
        The Main function starts the project application.
    
    .PARAMETER Commandline
        $Commandline contains the complete argument string passed to the script packager executable.
    
    .NOTES
        Use this function to initialize your script and to call GUI forms.
		
    .NOTES
        To get the console output in the Packager (Forms Engine) use: 
		$ConsoleOutput (Type: System.Collections.ArrayList)
#>
	Param ([String]$Commandline)
		
	#--------------------------------------------------------------------------
	#TODO: Add initialization script here (Load modules and check requirements)
	
	
	#--------------------------------------------------------------------------
	
	if((Show-RaceDBForm_psf) -eq 'OK')
	{
		
	}
	
	$script:ExitCode = 0 #Set the exit code for the Packager
}



#endregion Source: Startup.pss

#region Source: Globals.ps1
	#--------------------------------------------
	# Declare Global Variables and Functions here
	#--------------------------------------------
	
	
	#Sample function that provides the location of the script
	function Get-ScriptDirectory
	{
	<#
		.SYNOPSIS
			Get-ScriptDirectory returns the proper location of the script.
	
		.OUTPUTS
			System.String
		
		.NOTES
			Returns the correct path within a packaged executable.
	#>
		[OutputType([string])]
		param ()
		if ($null -ne $hostinvocation)
		{
			Split-Path $hostinvocation.MyCommand.path
		}
		else
		{
			Split-Path $script:MyInvocation.MyCommand.Path
		}
	}
	
	#Sample variable that provides the location of the script
	[string]$ScriptDirectory = Get-ScriptDirectory
	
	
	
#endregion Source: Globals.ps1

#region Source: RaceDBForm.psf
function Show-RaceDBForm_psf
{
#region File Recovery Data (DO NOT MODIFY)
<#RecoveryData:
cQYAAB+LCAAAAAAABABllcfOqwgSRvdIvMNVb5Ha5CD9cyWyDdgkE3eAyTmHp2/3nc1IU6tSpUV9
qlM/Vpr0WzqdQrREv77OXPbdf/7C/kb++g0Cv3796FOZl13USGWTvqI2/W1FSSpwUj+1fw9z9nP7
v4I/bf/mfyfhY0OeLw8pHZbldYFn/2scK3y8FtnwOjBvDTnc6PsZElbu12ovjqagreNg2xCPGX4V
eZihfOZ5RUuGqqUbCGReyqy8jc6fxBkOTjLn+5wqZEgQdUjRmhveGIOXTBja6u6g6jM+TsSfVURH
mDtfhF2GsGlZ3Cw0QE0Q4G9GlPQ9FFVNZjqhQ+tb6rnbbQkP5frOxsNBmHir0NIEYor6lfUGkmO5
nK2wwY1mxvAQHcTJnUrWAgRIjD/NJ2RzAvt575bvVKwMdx6v0ANf2vFKtFOt9LlFU7BjE9y4xXdG
5OdD2EtBdWEWwYqddHyNjgcfBAios9XlSYnBg1pryWjewdvq5UnP4FiIB6HSujfVmBHpn6/CPLhr
8aLI/cBcKjtiGaQqjm287mK7rhMgUHd2GOayf6UsFTwCHlWPOH5FxNV9JYCGeIJy3jxaTfIepfZQ
1Jq5HYiFNHw0w+05l0iMPkZR5bGXKIJAglcKz5vsRFlMrrinRRniEL0YqhMI2oZoko5bd2B34abH
W3cgXXk8p2jQAm6fFL+qrJTt4gmfTfLBggBM+uWo7k+6bUnJFA80RWAN2fTQhvzeRWaiQuJW6W35
PgRs1qjqyVuQwuC8Wl7bjI3FXRVOTZYZ3uNBoHTz+WnOEIuhmhxxmp21lY6NZuJSSRFnuD3qwaxa
5nFaeJfnLSFTVENqAlawtET6l3dTFKurOqvrUBDQF9MKIgfValvKuvOAWjpitPGx61uToi9OgtWk
kUQdKfcQjSk+8kSEPRSIaI+F+vcE9O8JwCTWzfEFAoubZlSzlSy6JrEaMZT4Qp7V+eakpk3I9UUt
nCf3cS8d5eLF29zjDKd91FkVic4JyusUBXIIOt2V6BUE4mtsiLqfGQh/bimewnBDLXx4g1WaabzL
iZ4lZt0VZ4eLyph3M231EHeNaqumSchSW/aH2Wk/qRBiIQiY7/rs7Xu/n9WCXYiBo1pMDdeo6vDb
7KbjaVOmC/cZ/rBy23lH7XefvmxuAefOUsy8XbH3rnucRUZlgwAC4+dafvITmyzEH0gz4RaSJG17
XskhzC8uXNElhYdXxz3fSJ03YtkpH0j2C78nr8TzCB3DKcLZq0UHAVGN8U85QLR4KfexrRNcSc/N
4gdOklRbjWDf9RA7se+FblDXY5Wz51GGVBqg+VglbZIUe91X9VzalgoCp0ETA19JeAwLfctJblrP
Gef5RNpsQQotRv5AaRTNK3pfLuzYYElqyUwyhlV1mjOC4ad59i6RxbA6gsCGP3c5Qx/dPBhXlRo0
7pl0fkMPmLnTHyOHsMN8aORDQG5rYbWwK6ebSxpJBrt3BclWHVPSdpFK+cu1r6Y7M0rG/iXKOOL9
wt1jocZQgW3o63TqhyqoVxyTWeMrZxLVKyap3qBOrzmU35/4QCIyzp84X+uzri0g4NjNvbCjV33X
tW48AjWw4LJ7z9jLc5+Tpo2FZIeVhC1CMgVdUOiwu87LYq8EsUlVxh964At6hKlICINAKPHuPAiQ
jGMQayeRfd08xWTZn9sf4P9BPzvPaRs3ZTr/un0jP7f/fTG//wFijgPscQYAAA==#>
#endregion
	#----------------------------------------------
	#region Import the Assemblies
	#----------------------------------------------
	[void][reflection.assembly]::Load('System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][reflection.assembly]::Load('System.Design, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
	[void][reflection.assembly]::Load('System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
	#endregion Import Assemblies

	#----------------------------------------------
	#region Generated Form Objects
	#----------------------------------------------
	[System.Windows.Forms.Application]::EnableVisualStyles()
	$raceDBController = New-Object 'System.Windows.Forms.Form'
	$buttonUpdateStatus = New-Object 'System.Windows.Forms.Button'
	$textboxStatus = New-Object 'System.Windows.Forms.TextBox'
	$labelStatus = New-Object 'System.Windows.Forms.Label'
	$buttonStop = New-Object 'System.Windows.Forms.Button'
	$buttonStart = New-Object 'System.Windows.Forms.Button'
	$mainMenu = New-Object 'System.Windows.Forms.MenuStrip'
	$fileToolStripMenuItem = New-Object 'System.Windows.Forms.ToolStripMenuItem'
	$exitToolStripMenuItem = New-Object 'System.Windows.Forms.ToolStripMenuItem'
	$helpToolStripMenuItem = New-Object 'System.Windows.Forms.ToolStripMenuItem'
	$aboutToolStripMenuItem = New-Object 'System.Windows.Forms.ToolStripMenuItem'
	$toolstripseparator1 = New-Object 'System.Windows.Forms.ToolStripSeparator'
	$preferencesToolstripMenuitem = New-Object 'System.Windows.Forms.ToolStripMenuItem'
	$logsToolstripMenuitem = New-Object 'System.Windows.Forms.ToolStripMenuItem'
	$runBashToolstripMenuitem = New-Object 'System.Windows.Forms.ToolStripMenuItem'
	$toolstripUpdate = New-Object 'System.Windows.Forms.ToolStripMenuItem'
	$InitialFormWindowState = New-Object 'System.Windows.Forms.FormWindowState'
	#endregion Generated Form Objects

	#----------------------------------------------
	# User Generated Script
	#----------------------------------------------
	
	$raceDBController_Load = {
		Write-Host $ScriptDirectory
		dbconfigCreate
		updateStatusTextBox
	}
	
	
	$exitToolStripMenuItem_Click = {
		#TODO: Place custom script here
		$raceDBController.Close()
	}
	
	$aboutToolStripMenuItem_Click = {
		#TODO: Place custom script here
		[System.Windows.Forms.MessageBox]::Show("RaceDB Contoller V1.0", "RaceDB Controller");
	}
	
	$buttonStart_Click = {
		ButtonsDisable
		#Execute-Command -commandTitle "runstart" -commandPath "docker.exe" -commandArguments "start racedb_app mysql_racedb_app"
		if (Test-Path -Path RaceDB.sqlite3 -PathType Leaf)
		{
			Execute-Command -commandTitle "runstart" -commandPath "docker-compose.exe" -commandArguments "-f docker-compose-migrate.yml up -d"
		}
		else
		{
			Execute-Command -commandTitle "runstart" -commandPath "docker-compose.exe" -commandArguments "up -d"
		}
		
		updateStatusTextBox
		[System.Windows.Forms.MessageBox]::Show("Start Command Sent", "RaceDB Start");
		ButtonsEnable
	}
	
	$buttonStop_Click = {
		ButtonsDisable
		Execute-Command -commandTitle "runstart" -commandPath "docker.exe" -commandArguments "stop mysql_racedb_app racedb_app"
		updateStatusTextBox
		[System.Windows.Forms.MessageBox]::Show("Stop Command Sent", "RaceDB Stop");
		ButtonsEnable	
	}
	
	function ButtonsEnable
	{
		$buttonStart.Enabled = $true
		$buttonStop.Enabled = $true
		$buttonUpdateStatus.Enabled = $true	
	}
	
	function ButtonsDisable
	{
		$buttonStart.Enabled = $false
		$buttonStop.Enabled = $false
		$buttonUpdateStatus.Enabled = $false
	}
	
	
	$runBashToolstripMenuitem_Click = {
		Start-Process -FilePath "docker.exe" -ArgumentList "exec -it racedb_app /bin/bash"
	}
	
	
	$logsToolstripMenuitem_Click = {
		(Show-RaceDBLog_psf)
	}
	
	$preferencesToolstripMenuitem_Click = {
		(Show-RaceDBPreferences_psf)
	}
	
	$toolstripUpdate_Click = {
		(Show-RaceDBUpdate2_psf)
	}
	
	$buttonUpdateStatus_Click = {
		ButtonsDisable
		updateStatusTextBox
		ButtonsEnable
	}
	
	Function GeneratePassword ([int]$Length)
	{
		Add-Type -AssemblyName System.Web
		$CharSet = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789{())};(/|'.ToCharArray()
		#Index1s 012345678901234567890123456789012345678901234567890123456789012345678901234567890123456
		#Index10s 0 1 2 3 4 5 6 7 8
		
		$rng = New-Object System.Security.Cryptography.RNGCryptoServiceProvider
		$bytes = New-Object byte[]($Length)
		
		$rng.GetBytes($bytes)
		
		$Return = New-Object char[]($Length)
		
		For ($i = 0; $i -lt $Length; $i++)
		{
			$Return[$i] = $CharSet[$bytes[$i] % $CharSet.Length]
		}
		
		Return (-join $Return)
	}
	
	function dbconfigCreate
	{
		if (Test-Path -Path dbconfig.env -PathType Leaf)
		{
			Write-Host "dbconfig.env exists"
		}
		else
		{
			$rootPassword = GeneratePassword(20)
			$userpassword = GeneratePassword(20)
			New-Item dbconfig.env
			Set-Content -Path dbconfig.env -Value "DATABASE_TYPE=mysql"
			Add-Content -Path dbconfig.env -Value "MYSQL_ROOT_PASSWORD=$rootPassword"
			Add-Content -Path dbconfig.env -Value "MYSQL_PASSWORD=$userPassword"
			Add-Content -Path dbconfig.env -Value "MYSQL_USER=racedb"
			Add-Content -Path dbconfig.env -Value "MYSQL_DATABASE=racedb"
			Write-Host "dbconfig.env generated"
		}
	}
	
	function updateStatusTextBox
	{
		$buttonUpdateStatus.Enabled = $false
		$textboxStatus.Clear()
		$p = Execute-Command -commandTitle "status" -commandPath "docker.exe" -commandArguments "ps -f name=racedb_app --format {{.Names}}:{{.Status}}"
		if ($p.stdout)
		{
			$textboxStatus.AppendText($p.stdout)
		}
		else
		{
			$textboxStatus.AppendText("RaceDB is not running")
		}
		$buttonUpdateStatus.Enabled = $true
	}
	
	Function Execute-Command ($commandTitle, $commandPath, $commandArguments)
	{
		Try
		{
			$raceDBController.Cursor = [System.Windows.Forms.Cursors]::WaitCursor
			
			Write-Host "Running: $commandPath $commandArguments"
			$pinfo = New-Object System.Diagnostics.ProcessStartInfo
			$pinfo.FileName = $commandPath
			$pinfo.RedirectStandardError = $true
			$pinfo.RedirectStandardOutput = $true
			$pinfo.UseShellExecute = $false
			$pinfo.Arguments = $commandArguments
			$p = New-Object System.Diagnostics.Process
			$p.StartInfo = $pinfo
			$p.Start() | Out-Null
			[pscustomobject]@{
				commandTitle = $commandTitle
				stdout	     = $p.StandardOutput.ReadToEnd()
				stderr	     = $p.StandardError.ReadToEnd()
				ExitCode	 = $p.ExitCode
			}
			$p.WaitForExit()
		}
		Catch
		{
			Write-Host "That didn't work"
		}
		$raceDBController.Cursor = [System.Windows.Forms.Cursors]::Default
		
	}
	#endregion
	
	# --End User Generated Script--
	#----------------------------------------------
	#region Generated Events
	#----------------------------------------------
	
	$Form_StateCorrection_Load=
	{
		#Correct the initial state of the form to prevent the .Net maximized form issue
		$raceDBController.WindowState = $InitialFormWindowState
	}
	
	$Form_StoreValues_Closing=
	{
		#Store the control values
		$script:RaceDBForm_textboxStatus = $textboxStatus.Text
	}

	
	$Form_Cleanup_FormClosed=
	{
		#Remove all event handlers from the controls
		try
		{
			$buttonUpdateStatus.remove_Click($buttonUpdateStatus_Click)
			$buttonStop.remove_Click($buttonStop_Click)
			$buttonStart.remove_Click($buttonStart_Click)
			$raceDBController.remove_Load($raceDBController_Load)
			$exitToolStripMenuItem.remove_Click($exitToolStripMenuItem_Click)
			$aboutToolStripMenuItem.remove_Click($aboutToolStripMenuItem_Click)
			$preferencesToolstripMenuitem.remove_Click($preferencesToolstripMenuitem_Click)
			$logsToolstripMenuitem.remove_Click($logsToolstripMenuitem_Click)
			$runBashToolstripMenuitem.remove_Click($runBashToolstripMenuitem_Click)
			$toolstripUpdate.remove_Click($toolstripUpdate_Click)
			$raceDBController.remove_Load($Form_StateCorrection_Load)
			$raceDBController.remove_Closing($Form_StoreValues_Closing)
			$raceDBController.remove_FormClosed($Form_Cleanup_FormClosed)
		}
		catch { Out-Null <# Prevent PSScriptAnalyzer warning #> }
	}
	#endregion Generated Events

	#----------------------------------------------
	#region Generated Form Code
	#----------------------------------------------
	$raceDBController.SuspendLayout()
	$mainMenu.SuspendLayout()
	#
	# raceDBController
	#
	$raceDBController.Controls.Add($buttonUpdateStatus)
	$raceDBController.Controls.Add($textboxStatus)
	$raceDBController.Controls.Add($labelStatus)
	$raceDBController.Controls.Add($buttonStop)
	$raceDBController.Controls.Add($buttonStart)
	$raceDBController.Controls.Add($mainMenu)
	$raceDBController.AutoScaleDimensions = '6, 13'
	$raceDBController.AutoScaleMode = 'Font'
	$raceDBController.ClientSize = '390, 202'
	$raceDBController.FormBorderStyle = 'FixedDialog'
	$raceDBController.MainMenuStrip = $mainMenu
	$raceDBController.MaximizeBox = $False
	$raceDBController.Name = 'raceDBController'
	$raceDBController.StartPosition = 'CenterScreen'
	$raceDBController.Text = 'RaceDB Contoller'
	$raceDBController.add_Load($raceDBController_Load)
	#
	# buttonUpdateStatus
	#
	$buttonUpdateStatus.Location = '238, 84'
	$buttonUpdateStatus.Name = 'buttonUpdateStatus'
	$buttonUpdateStatus.Size = '91, 23'
	$buttonUpdateStatus.TabIndex = 5
	$buttonUpdateStatus.Text = 'Update Status'
	$buttonUpdateStatus.UseCompatibleTextRendering = $True
	$buttonUpdateStatus.UseVisualStyleBackColor = $True
	$buttonUpdateStatus.add_Click($buttonUpdateStatus_Click)
	#
	# textboxStatus
	#
	$textboxStatus.Location = '130, 142'
	$textboxStatus.Multiline = $True
	$textboxStatus.Name = 'textboxStatus'
	$textboxStatus.ReadOnly = $True
	$textboxStatus.Size = '219, 33'
	$textboxStatus.TabIndex = 4
	#
	# labelStatus
	#
	$labelStatus.AutoSize = $True
	$labelStatus.Location = '39, 142'
	$labelStatus.Name = 'labelStatus'
	$labelStatus.Size = '85, 17'
	$labelStatus.TabIndex = 3
	$labelStatus.Text = 'RacdDB Status:'
	$labelStatus.UseCompatibleTextRendering = $True
	#
	# buttonStop
	#
	$buttonStop.Location = '143, 84'
	$buttonStop.Name = 'buttonStop'
	$buttonStop.Size = '75, 23'
	$buttonStop.TabIndex = 2
	$buttonStop.Text = 'Stop'
	$buttonStop.UseCompatibleTextRendering = $True
	$buttonStop.UseVisualStyleBackColor = $True
	$buttonStop.add_Click($buttonStop_Click)
	#
	# buttonStart
	#
	$buttonStart.Location = '49, 84'
	$buttonStart.Name = 'buttonStart'
	$buttonStart.Size = '75, 23'
	$buttonStart.TabIndex = 1
	$buttonStart.Text = 'Start'
	$buttonStart.UseCompatibleTextRendering = $True
	$buttonStart.UseVisualStyleBackColor = $True
	$buttonStart.add_Click($buttonStart_Click)
	#
	# mainMenu
	#
	[void]$mainMenu.Items.Add($fileToolStripMenuItem)
	[void]$mainMenu.Items.Add($helpToolStripMenuItem)
	$mainMenu.Location = '0, 0'
	$mainMenu.Name = 'mainMenu'
	$mainMenu.Size = '390, 24'
	$mainMenu.TabIndex = 0
	$mainMenu.Text = 'menustrip1'
	#
	# fileToolStripMenuItem
	#
	[void]$fileToolStripMenuItem.DropDownItems.Add($preferencesToolstripMenuitem)
	[void]$fileToolStripMenuItem.DropDownItems.Add($logsToolstripMenuitem)
	[void]$fileToolStripMenuItem.DropDownItems.Add($runBashToolstripMenuitem)
	[void]$fileToolStripMenuItem.DropDownItems.Add($toolstripUpdate)
	[void]$fileToolStripMenuItem.DropDownItems.Add($toolstripseparator1)
	[void]$fileToolStripMenuItem.DropDownItems.Add($exitToolStripMenuItem)
	$fileToolStripMenuItem.Name = 'fileToolStripMenuItem'
	$fileToolStripMenuItem.Size = '37, 20'
	$fileToolStripMenuItem.Text = 'File'
	#
	# exitToolStripMenuItem
	#
	$exitToolStripMenuItem.Name = 'exitToolStripMenuItem'
	$exitToolStripMenuItem.Size = '155, 22'
	$exitToolStripMenuItem.Text = 'Exit'
	$exitToolStripMenuItem.add_Click($exitToolStripMenuItem_Click)
	#
	# helpToolStripMenuItem
	#
	[void]$helpToolStripMenuItem.DropDownItems.Add($aboutToolStripMenuItem)
	$helpToolStripMenuItem.Name = 'helpToolStripMenuItem'
	$helpToolStripMenuItem.Size = '44, 20'
	$helpToolStripMenuItem.Text = 'Help'
	#
	# aboutToolStripMenuItem
	#
	$aboutToolStripMenuItem.Name = 'aboutToolStripMenuItem'
	$aboutToolStripMenuItem.Size = '107, 22'
	$aboutToolStripMenuItem.Text = 'About'
	$aboutToolStripMenuItem.add_Click($aboutToolStripMenuItem_Click)
	#
	# toolstripseparator1
	#
	$toolstripseparator1.Name = 'toolstripseparator1'
	$toolstripseparator1.Size = '152, 6'
	#
	# preferencesToolstripMenuitem
	#
	$preferencesToolstripMenuitem.Name = 'preferencesToolstripMenuitem'
	$preferencesToolstripMenuitem.Size = '155, 22'
	$preferencesToolstripMenuitem.Text = 'Preferences'
	$preferencesToolstripMenuitem.add_Click($preferencesToolstripMenuitem_Click)
	#
	# logsToolstripMenuitem
	#
	$logsToolstripMenuitem.Name = 'logsToolstripMenuitem'
	$logsToolstripMenuitem.Size = '155, 22'
	$logsToolstripMenuitem.Text = 'Logs'
	$logsToolstripMenuitem.add_Click($logsToolstripMenuitem_Click)
	#
	# runBashToolstripMenuitem
	#
	$runBashToolstripMenuitem.Name = 'runBashToolstripMenuitem'
	$runBashToolstripMenuitem.Size = '155, 22'
	$runBashToolstripMenuitem.Text = 'Run Bash'
	$runBashToolstripMenuitem.add_Click($runBashToolstripMenuitem_Click)
	#
	# toolstripUpdate
	#
	$toolstripUpdate.Name = 'toolstripUpdate'
	$toolstripUpdate.Size = '155, 22'
	$toolstripUpdate.Text = 'Update RaceDB'
	$toolstripUpdate.add_Click($toolstripUpdate_Click)
	$mainMenu.ResumeLayout()
	$raceDBController.ResumeLayout()
	#endregion Generated Form Code

	#----------------------------------------------

	#Save the initial state of the form
	$InitialFormWindowState = $raceDBController.WindowState
	#Init the OnLoad event to correct the initial state of the form
	$raceDBController.add_Load($Form_StateCorrection_Load)
	#Clean up the control events
	$raceDBController.add_FormClosed($Form_Cleanup_FormClosed)
	#Store the control values when form is closing
	$raceDBController.add_Closing($Form_StoreValues_Closing)
	#Show the Form
	return $raceDBController.ShowDialog()

}
#endregion Source: RaceDBForm.psf

#region Source: RaceDBLog.psf
function Show-RaceDBLog_psf
{
#region File Recovery Data (DO NOT MODIFY)
<#RecoveryData:
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#>
#endregion
	#----------------------------------------------
	#region Import the Assemblies
	#----------------------------------------------
	[void][reflection.assembly]::Load('System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
	[void][reflection.assembly]::Load('System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	#endregion Import Assemblies

	#----------------------------------------------
	#region Generated Form Objects
	#----------------------------------------------
	[System.Windows.Forms.Application]::EnableVisualStyles()
	$formLogOutput = New-Object 'System.Windows.Forms.Form'
	$buttonRunProcess = New-Object 'System.Windows.Forms.Button'
	$richtextboxOutput = New-Object 'System.Windows.Forms.RichTextBox'
	$buttonFind = New-Object 'System.Windows.Forms.Button'
	$textboxFind = New-Object 'System.Windows.Forms.TextBox'
	$buttonCopy = New-Object 'System.Windows.Forms.Button'
	$buttonClose = New-Object 'System.Windows.Forms.Button'
	$imagelistButtonBusyAnimation = New-Object 'System.Windows.Forms.ImageList'
	$timerProcessTracker = New-Object 'System.Windows.Forms.Timer'
	$InitialFormWindowState = New-Object 'System.Windows.Forms.FormWindowState'
	#endregion Generated Form Objects

	#----------------------------------------------
	# User Generated Script
	#----------------------------------------------
	
	 
	#region FindFunction
	function FindText
	{	
		if($textboxFind.Text.Length -eq 0)
		{
			return
		}
		
		$index = $richtextboxOutput.Find($textboxFind.Text,$richtextboxOutput.SelectionStart+ $richtextboxOutput.SelectedText.Length,[System.Windows.Forms.RichTextBoxFinds]::None)
		if($index -ge 0)
		{	
			$richtextboxOutput.Select($index,$textboxFind.Text.Length)
			$richtextboxOutput.ScrollToCaret()
			#$richtextbox1.Focus()
		}
		else
		{
			$index = $richtextboxOutput.Find($textboxFind.Text,0,$richtextboxOutput.SelectionStart,[System.Windows.Forms.RichTextBoxFinds]::None)
			#
			if($index -ge 0)
			{	
				$richtextboxOutput.Select($index,$textboxFind.Text.Length)
				$richtextboxOutput.ScrollToCaret()
				#$richtextbox1.Focus()
			}
			else
			{
				$richtextboxOutput.SelectionStart = 0
			}
		}
		
	}
	#endregion
	
	
	$formLogOutput_Load={
		runProcess
	}
	
	$buttonClose_Click={
		#TODO: Place custom script here
		$formLogOutput.Close()
	}
	
	$buttonCopy_Click={
		#The following requires STA mode
	#	if($textbox1.Text.Length -gt 0)
	#	{
	#		[System.Windows.Forms.Clipboard]::SetText($textbox1.Text)
	#	}
		#Alternative - Does not require STA
		$richtextboxOutput.SelectAll() #Select all the text
		$richtextboxOutput.Copy()	#Copy selected text to clipboard
		$richtextboxOutput.Select(0,0); #Unselect all the text
	}
	
	$textboxFind_TextChanged={
		$buttonFind.Enabled = $textboxFind.Text.Length -gt 0
	}
	
	$buttonFind_Click={
		#TODO: Place custom script here
		FindText
	}
	
	
	$processTracker_FormClosed=[System.Windows.Forms.FormClosedEventHandler]{
	#Event Argument: $_ = [System.Windows.Forms.FormClosedEventArgs]
		#Stop any pending processes
		#Stop-ProcessTracker
	}
	
	$buttonRunProcess_Click= {
		runProcess
	
	}
	
	
	function runProcess
	{
		$buttonRunProcess.Enabled = $false
		
		#Clear the output
		$richtextboxOutput.Clear()
		
		#TODO: Set the process path here
		$paramAddProcessTracker = @{
			FilePath							   = 'docker.exe'
			Arguments							   = 'logs racedb_app'
			SyncObject							   = $buttonRunProcess
			RedirectOutputScript				   = {
				# Use $_.Data to access the output text
				$richtextboxOutput.AppendText($_.Data)
				$richtextboxOutput.AppendText("`r`n")
			}
			RedirectErrorScript				       = {
				if ($_.Data)
				{
					# Use $_.Data to access the output text
					# Use red to display errors
					$colorOld = $richtextboxOutput.SelectionColor;
					$richtextboxOutput.SelectionColor = 'Red'
					$richtextboxOutput.AppendText($_.Data)
					$richtextboxOutput.AppendText("`r`n")
					$richtextboxOutput.SelectionColor = $colorOld
				}
			}
			CompletedScript					       = {
				$buttonRunProcess.Enabled = $true
				$buttonRunProcess.ImageIndex = -1
			}
			UpdateScript						   = {
				#Animate the Button
				if ($null -ne $buttonRunProcess.ImageList)
				{
					if ($buttonRunProcess.ImageIndex -lt $buttonRunProcess.ImageList.Images.Count - 1)
					{
						$buttonRunProcess.ImageIndex += 1
					}
					else
					{
						$buttonRunProcess.ImageIndex = 0
					}
				}
			}
		}
		
		Add-ProcessTracker @paramAddProcessTracker
		
	}
	
	<#	
		===========================================================================
		 Created with: 	SAPIEN Technologies, Inc., PowerShell Studio 2019 v5.6.170
		 Created on:   	12/7/2019 5:57 PM
		 Created by:   	Mark Buckaway
		 Organization: 	
		 Filename:     	processTracker.psm1
		-------------------------------------------------------------------------
		 Module Name: 
		===========================================================================
	#>
	
	
	#region Process Tracker
	function Stop-ProcessTracker
	{
		<#
			.SYNOPSIS
				Stops and removes all processes from the list.
		#>
		#Stop the timer
		$timerProcessTracker.Stop()
		
		#Remove all the processes
		while ($ProcessTrackerList.Count -gt 0)
		{
			$process = $ProcessTrackerList[0].Process
			$ProcessTrackerList.RemoveAt(0)
			if (-not $process.HasExited)
			{
				Stop-Process -InputObject $process
			}
		}
	}
	
	$timerProcessTracker_Tick = {
		Update-ProcessTracker
	}
	
	function Update-ProcessTracker
	{
		<#
			.SYNOPSIS
				Checks the status of each job on the list.
		#>
		
		#Poll the jobs for status updates
		$timerProcessTracker.Stop() #Freeze the Timer
		
		for ($index = 0; $index -lt $ProcessTrackerList.Count; $index++)
		{
			$psObject = $ProcessTrackerList[$index]
			
			if ($null -ne $psObject)
			{
				if ($null -ne $psObject.Process)
				{
					if ($psObject.Process.HasExited)
					{
						#Call the Complete Script Block
						if ($null -ne $psObject.CompleteScript)
						{
							#$results = Receive-Job -Job $psObject.Job
							Invoke-Command -ScriptBlock $psObject.CompleteScript -ArgumentList $psObject.Process
						}
						
						$ProcessTrackerList.RemoveAt($index)
						$index-- #Step back so we don't skip a job
					}
					elseif ($null -ne $psObject.UpdateScript)
					{
						#Call the Update Script Block
						Invoke-Command -ScriptBlock $psObject.UpdateScript -ArgumentList $psObject.Process
					}
				}
			}
			else
			{
				$ProcessTrackerList.RemoveAt($index)
				$index-- #Step back so we don't skip a job
			}
		}
		
		if ($ProcessTrackerList.Count -gt 0)
		{
			$timerProcessTracker.Start() #Resume the timer
		}
	}
	
	$ProcessTrackerList = New-Object System.Collections.ArrayList
	function Add-ProcessTracker
	{
		<#
			.SYNOPSIS
				Add a new process to the ProcessTracker and starts the timer.
		
			.DESCRIPTION
				Add a new process to the ProcessTracker and starts the timer.
		
			.PARAMETER  FilePath
				The path to executable.
		
			.PARAMETER ArgumentList
				The arguments to pass to the process.
		
			.PARAMETER CompletedScript
				The script block that will be called when the process is complete.
				The process is passed as an argument. The process argument is null when the job fails.
		
			.PARAMETER UpdateScript
				The script block that will be called each time the timer ticks.
				The process is passed as an argument.
		
			.PARAMETER RedirectOutputScript
				The script block that handles output from the process.
				Use $_.Data to access the output text.
		
			.PARAMETER RedirectErrorScript
				The script block that handles error output from the process.
				Use $_.Data to access the output text.
		
			.PARAMETER NoNewWindow
				Start the new process in the current console window.
		
			.PARAMETER WindowStyle
				Specifies the state of the window that is used for the new process. 
				Valid values are Normal, Hidden, Minimized, and Maximized. 
				The default value is Normal.
		
			.PARAMETER WorkingDirectory
				Specifies the location of the executable file or document that runs in the process. 
				The default is the current directory.
		
			.PARAMETER RedirectInput
				Redirects the input of the process. If this switch is set, the function will return the process object.
				Use the process object's StandardInput property to access the input stream.
		
			.PARAMETER PassThru
				Returns the process that was started.
		
			.PARAMETER SyncObject
				The object used to marshal the process event handler calls that are issued.
				You must pass a control to sync otherwise it will produce an error when redirecting output.
	
			.EXAMPLE
				 Add-ProcessTracker -FilePath 'notepad.exe' `
				-SyncObject $form1 `
				-CompletedScript {
					Param([System.Diagnostics.Process]$Process)
					$button.Enable = $true
				}`
				-UpdateScript {
					Param([System.Diagnostics.Process]$Process)
					Function-Animate $button
				}`
				-RedirectOutputScript { 
				# Use $_.Data to access the output text
					$textBox1.AppendText($_.Data)
					$textBox1.AppendText("`r`n")
				}
			.EXAMPLE
				$process = Add-ProcessTracker -FilePath 'powershell.exe' `
				-RedirectInput `
				-SyncObject $buttonRunProcess `
				-RedirectOutputScript {
					# Use $_.Data to access the output text
					$richtextbox1.AppendText($_.Data)
					$richtextbox1.AppendText("`r`n")
				}
				
				#Write to the console
				$process.StandardInput.WriteLine("Get-Process")
		
			.OUTPUTS
				 System.Diagnostics.Process
		#>
		
		[OutputType([System.Diagnostics.Process])]
		Param (
			[ValidateNotNull()]
			[Parameter(Mandatory = $true)]
			[string]$FilePath,
			[string]$Arguments,
			[string]$WorkingDirectory,
			[Parameter(Mandatory = $true)]
			[ValidateNotNull()]
			[System.ComponentModel.ISynchronizeInvoke]$SyncObject,
			[ScriptBlock]$CompletedScript,
			[ScriptBlock]$UpdateScript,
			[ScriptBlock]$RedirectOutputScript,
			[ScriptBlock]$RedirectErrorScript,
			[System.Diagnostics.ProcessWindowStyle]$WindowStyle = 'Normal',
			[switch]$RedirectInput,
			[switch]$NoNewWindow,
			[switch]$PassThru
		)
		
		#Start the Process
		try
		{
			$process = New-Object System.Diagnostics.Process
			$process.StartInfo.FileName = $FilePath
			$process.StartInfo.WindowStyle = $WindowStyle
			
			if ($NoNewWindow)
			{
				$process.StartInfo.CreateNoWindow = $true
			}
			
			if ($WorkingDirectory)
			{
				$process.StartInfo.WorkingDirectory = $WorkingDirectory
			}
			
			#Handle Redirection
			if ($RedirectErrorScript)
			{
				$process.EnableRaisingEvents = $true
				$process.StartInfo.UseShellExecute = $false
				$process.StartInfo.RedirectStandardError = $true
				$process.StartInfo.CreateNoWindow = $true
				$process.add_ErrorDataReceived($RedirectErrorScript)
			}
			
			if ($RedirectOutputScript)
			{
				$process.StartInfo.UseShellExecute = $false
				$process.StartInfo.RedirectStandardOutput = $true
				$process.add_OutputDataReceived($RedirectOutputScript)
			}
			
			if ($RedirectInput)
			{
				$process.EnableRaisingEvents = $true
				$process.StartInfo.UseShellExecute = $false
				$process.StartInfo.CreateNoWindow = $true
				$process.StartInfo.RedirectStandardInput = $true
				$PassThru = $true #Force the object to return
			}
			
			#Pass the arguments and sync with the form
			$process.StartInfo.Arguments = $Arguments
			$process.SynchronizingObject = $SyncObject
			$process.Start() | Out-Null
			
			#Begin the redirect reads
			if ($RedirectOutputScript)
			{
				$process.BeginOutputReadLine()
			}
			
			if ($RedirectErrorScript)
			{
				$process.BeginErrorReadLine()
			}
		}
		catch
		{
			Write-Error $_.Exception.Message
			$process = $null
		}
		
		if ($null -ne $process)
		{
			#Create a Custom Object to keep track of the Job & Script Blocks
			$members = @{
				"Process"	     = $process;
				"CompleteScript" = $CompletedScript;
				"UpdateScript"   = $UpdateScript
			}
			
			$psObject = New-Object System.Management.Automation.PSObject -Property $members
			
			[void]$ProcessTrackerList.Add($psObject)
			
			#Start the Timer
			if (-not $timerProcessTracker.Enabled)
			{
				$timerProcessTracker.Start()
			}
			
			#Return the process if using PassThru
			if ($PassThru)
			{
				return $process
			}
		}
		elseif ($null -ne $CompletedScript)
		{
			#Failed
			Invoke-Command -ScriptBlock $CompletedScript -ArgumentList $null
		}
		
	}
	
	#endregion
	
	# --End User Generated Script--
	#----------------------------------------------
	#region Generated Events
	#----------------------------------------------
	
	$Form_StateCorrection_Load=
	{
		#Correct the initial state of the form to prevent the .Net maximized form issue
		$formLogOutput.WindowState = $InitialFormWindowState
	}
	
	$Form_StoreValues_Closing=
	{
		#Store the control values
		$script:RaceDBLog_richtextboxOutput = $richtextboxOutput.Text
		$script:RaceDBLog_textboxFind = $textboxFind.Text
	}

	
	$Form_Cleanup_FormClosed=
	{
		#Remove all event handlers from the controls
		try
		{
			$buttonRunProcess.remove_Click($buttonRunProcess_Click)
			$buttonFind.remove_Click($buttonFind_Click)
			$textboxFind.remove_TextChanged($textboxFind_TextChanged)
			$buttonCopy.remove_Click($buttonCopy_Click)
			$buttonClose.remove_Click($buttonClose_Click)
			$formLogOutput.remove_FormClosed($processTracker_FormClosed)
			$formLogOutput.remove_Load($formLogOutput_Load)
			$timerProcessTracker.remove_Tick($timerProcessTracker_Tick)
			$formLogOutput.remove_Load($Form_StateCorrection_Load)
			$formLogOutput.remove_Closing($Form_StoreValues_Closing)
			$formLogOutput.remove_FormClosed($Form_Cleanup_FormClosed)
		}
		catch { Out-Null <# Prevent PSScriptAnalyzer warning #> }
	}
	#endregion Generated Events

	#----------------------------------------------
	#region Generated Form Code
	#----------------------------------------------
	$formLogOutput.SuspendLayout()
	#
	# formLogOutput
	#
	$formLogOutput.Controls.Add($buttonRunProcess)
	$formLogOutput.Controls.Add($richtextboxOutput)
	$formLogOutput.Controls.Add($buttonFind)
	$formLogOutput.Controls.Add($textboxFind)
	$formLogOutput.Controls.Add($buttonCopy)
	$formLogOutput.Controls.Add($buttonClose)
	$formLogOutput.AcceptButton = $buttonFind
	$formLogOutput.AutoScaleDimensions = '6, 13'
	$formLogOutput.AutoScaleMode = 'Font'
	$formLogOutput.ClientSize = '823, 362'
	$formLogOutput.Margin = '4, 4, 4, 4'
	$formLogOutput.MinimumSize = '304, 315'
	$formLogOutput.Name = 'formLogOutput'
	$formLogOutput.StartPosition = 'CenterScreen'
	$formLogOutput.Text = 'RaceDB Logs'
	$formLogOutput.add_FormClosed($processTracker_FormClosed)
	$formLogOutput.add_Load($formLogOutput_Load)
	#
	# buttonRunProcess
	#
	$buttonRunProcess.Anchor = 'Bottom, Left'
	$buttonRunProcess.ImageList = $imagelistButtonBusyAnimation
	$buttonRunProcess.Location = '12, 327'
	$buttonRunProcess.Name = 'buttonRunProcess'
	$buttonRunProcess.Size = '75, 23'
	$buttonRunProcess.TabIndex = 0
	$buttonRunProcess.Text = '&Run'
	$buttonRunProcess.TextImageRelation = 'ImageBeforeText'
	$buttonRunProcess.UseCompatibleTextRendering = $True
	$buttonRunProcess.UseVisualStyleBackColor = $True
	$buttonRunProcess.add_Click($buttonRunProcess_Click)
	#
	# richtextboxOutput
	#
	$richtextboxOutput.Anchor = 'Top, Bottom, Left, Right'
	$richtextboxOutput.BackColor = 'Window'
	$richtextboxOutput.Font = 'Courier New, 8.25pt'
	$richtextboxOutput.HideSelection = $False
	$richtextboxOutput.Location = '12, 36'
	$richtextboxOutput.Name = 'richtextboxOutput'
	$richtextboxOutput.ReadOnly = $True
	$richtextboxOutput.Size = '798, 281'
	$richtextboxOutput.TabIndex = 6
	$richtextboxOutput.Text = ''
	$richtextboxOutput.WordWrap = $False
	#
	# buttonFind
	#
	$buttonFind.Anchor = 'Top, Right'
	$buttonFind.Enabled = $False
	$buttonFind.Location = '775, 8'
	$buttonFind.Name = 'buttonFind'
	$buttonFind.Size = '36, 23'
	$buttonFind.TabIndex = 5
	$buttonFind.Text = '&Find'
	$buttonFind.UseCompatibleTextRendering = $True
	$buttonFind.UseVisualStyleBackColor = $True
	$buttonFind.add_Click($buttonFind_Click)
	#
	# textboxFind
	#
	$textboxFind.Anchor = 'Top, Right'
	$textboxFind.Location = '578, 10'
	$textboxFind.Name = 'textboxFind'
	$textboxFind.Size = '191, 20'
	$textboxFind.TabIndex = 4
	$textboxFind.add_TextChanged($textboxFind_TextChanged)
	#
	# buttonCopy
	#
	$buttonCopy.Anchor = 'Bottom'
	$buttonCopy.Location = '374, 327'
	$buttonCopy.Name = 'buttonCopy'
	$buttonCopy.Size = '75, 23'
	$buttonCopy.TabIndex = 3
	$buttonCopy.Text = '&Copy'
	$buttonCopy.UseCompatibleTextRendering = $True
	$buttonCopy.UseVisualStyleBackColor = $True
	$buttonCopy.add_Click($buttonCopy_Click)
	#
	# buttonClose
	#
	$buttonClose.Anchor = 'Bottom, Right'
	$buttonClose.Location = '736, 327'
	$buttonClose.Name = 'buttonClose'
	$buttonClose.Size = '75, 23'
	$buttonClose.TabIndex = 2
	$buttonClose.Text = 'Cl&ose'
	$buttonClose.UseCompatibleTextRendering = $True
	$buttonClose.UseVisualStyleBackColor = $True
	$buttonClose.add_Click($buttonClose_Click)
	#
	# imagelistButtonBusyAnimation
	#
	$Formatter_binaryFomatter = New-Object System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
	#region Binary Data
	$System_IO_MemoryStream = New-Object System.IO.MemoryStream (,[byte[]][System.Convert]::FromBase64String('
AAEAAAD/////AQAAAAAAAAAMAgAAAFdTeXN0ZW0uV2luZG93cy5Gb3JtcywgVmVyc2lvbj00LjAu
MC4wLCBDdWx0dXJlPW5ldXRyYWwsIFB1YmxpY0tleVRva2VuPWI3N2E1YzU2MTkzNGUwODkFAQAA
ACZTeXN0ZW0uV2luZG93cy5Gb3Jtcy5JbWFnZUxpc3RTdHJlYW1lcgEAAAAERGF0YQcCAgAAAAkD
AAAADwMAAAB2CgAAAk1TRnQBSQFMAgEBCAEAAXABAAFwAQABEAEAARABAAT/ASEBAAj/AUIBTQE2
BwABNgMAASgDAAFAAwABMAMAAQEBAAEgBgABMP8A/wD/AP8A/wD/AP8A/wD/AP8A/wD/AP8A/wD/
AP8AugADwgH/Az4B/wM+Af8DwgH/MAADwgH/A14B/wOCAf8DwgH/sAADPgH/AwAB/wMAAf8DPgH/
MAADggH/Az4B/wM+Af8DXgH/gAADwgH/Az4B/wM+Af8DwgH/IAADPgH/AwAB/wMAAf8DPgH/A8IB
/wNeAf8DggH/A8IB/xAAA8IB/wM+Af8DPgH/A8IB/wNeAf8DPgH/Az4B/wNeAf8EAAOSAf8DkgH/
A8IB/3AAAz4B/wMAAf8DAAH/Az4B/yAAA8IB/wM+Af8DPgH/A8IB/wOCAf8DPgH/Az4B/wOCAf8Q
AAM+Af8DAAH/AwAB/wM+Af8DwgH/A14B/wOCAf8DwgH/A5IB/wOCAf8DggH/A5IB/3AAAz4B/wMA
Af8DAAH/Az4B/zAAA14B/wM+Af8DPgH/A14B/xAAAz4B/wMAAf8DAAH/Az4B/xAAA5IB/wOSAf8D
kgH/A8IB/3AAA8IB/wM+Af8DPgH/A8IB/zAAA8IB/wNeAf8DggH/A8IB/xAAA8IB/wM+Af8DPgH/
A8IB/xAAA8IB/wOSAf8DkgH/A8IB/zgAA8IB/wM+Af8DPgH/A8IB/zAAA8IB/wOCAf8DXgH/A8IB
/zAAA8IB/wPCAf8DkgH/A8IB/zQAA8IB/wPCAf80AAM+Af8DAAH/AwAB/wM+Af8wAANeAf8DPgH/
Az4B/wNeAf8wAAOSAf8DggH/A4IB/wOSAf8wAAPCAf8DwgH/A8IB/wPCAf8wAAM+Af8DAAH/AwAB
/wM+Af8wAAOCAf8DPgH/Az4B/wOCAf8wAAPCAf8DggH/A5IB/wOSAf8wAAPCAf8DwgH/A8IB/wPC
Af8wAAPCAf8DPgH/Az4B/wPCAf8wAAPCAf8DggH/A14B/wPCAf8wAAPCAf8DkgH/A5IB/wPCAf80
AAPCAf8DwgH/EAADwgH/A8IB/xQAA8IB/wOCAf8DXgH/A8IB/zAAA8IB/wOSAf8DkgH/A8IB/zQA
A8IB/wPCAf9UAAPCAf8DwgH/A8IB/wPCAf8QAANeAf8DPgH/Az4B/wNeAf8wAAOSAf8DggH/A5IB
/wOSAf8wAAPCAf8DwgH/A8IB/wPCAf9QAAPCAf8DwgH/A8IB/wPCAf8DwgH/A8IB/wOSAf8DwgH/
A4IB/wM+Af8DPgH/A4IB/yQAA8IB/wPCAf8EAAPCAf8DggH/A5IB/wOSAf8wAAPCAf8DwgH/A8IB
/wPCAf9UAAPCAf8DwgH/BAADkgH/A4IB/wOCAf8DkgH/A8IB/wOCAf8DXgH/A8IB/yAAA8IB/wPC
Af8DwgH/A8IB/wPCAf8DkgH/A5IB/wPCAf80AAPCAf8DwgH/ZAADkgH/A5IB/wOSAf8DkgH/MAAD
wgH/A8IB/wPCAf8DwgH/sAADwgH/A5IB/wOSAf8DwgH/NAADwgH/A8IB/7QAA8IB/wPCAf8DkgH/
A8IB/zQAA8IB/wPCAf+0AAOSAf8DggH/A4IB/wOSAf8wAAPCAf8DwgH/A8IB/wPCAf+gAAPCAf8D
XgH/A4IB/wPCAf8DkgH/A5IB/wOSAf8DwgH/BAADwgH/A8IB/xQAA8IB/wPCAf8DkgH/A8IB/wPC
Af8DwgH/A8IB/wPCAf8kAAPCAf8DwgH/dAADggH/Az4B/wM+Af8DggH/A8IB/wOSAf8DkgH/A8IB
/wPCAf8DwgH/A8IB/wPCAf8QAAOSAf8DggH/A4IB/wOSAf8EAAPCAf8DwgH/JAADwgH/A8IB/wPC
Af8DwgH/cAADXgH/Az4B/wM+Af8DggH/EAADwgH/A8IB/wPCAf8DwgH/EAADkgH/A5IB/wOSAf8D
kgH/MAADwgH/A8IB/wPCAf8DwgH/cAADwgH/A14B/wNeAf8DwgH/FAADwgH/A8IB/xQAA8IB/wOS
Af8DkgH/A8IB/zQAA8IB/wPCAf9sAAPCAf8DPgH/Az4B/wPCAf8wAAPCAf8DXgH/A4IB/wPCAf8w
AAPCAf8DwgH/A5IB/wPCAf80AAPCAf8DwgH/NAADPgH/AwAB/wMAAf8DPgH/MAADggH/Az4B/wM+
Af8DXgH/MAADkgH/A4IB/wOCAf8DkgH/MAADwgH/A8IB/wPCAf8DwgH/MAADPgH/AwAB/wMAAf8D
PgH/MAADXgH/Az4B/wM+Af8DggH/MAADkgH/A5IB/wOSAf8DkgH/MAADwgH/A8IB/wPCAf8DwgH/
MAADwgH/Az4B/wM+Af8DwgH/MAADwgH/A14B/wNeAf8DwgH/MAADwgH/A5IB/wOSAf8DwgH/NAAD
wgH/A8IB/3wAA8IB/wM+Af8DPgH/A8IB/zAAA8IB/wNeAf8DggH/A8IB/zAAA8IB/wPCAf8DkgH/
A8IB/xAAA8IB/wM+Af8DPgH/A8IB/1AAAz4B/wMAAf8DAAH/Az4B/zAAA4IB/wM+Af8DPgH/A14B
/zAAA5IB/wOCAf8DggH/A5IB/xAAAz4B/wMAAf8DAAH/Az4B/1AAAz4B/wMAAf8DAAH/Az4B/zAA
A14B/wM+Af8DPgH/A4IB/wOSAf8DPgH/Az4B/wPCAf8gAAOSAf8DkgH/A5IB/wOSAf8DwgH/A14B
/wOCAf8DwgH/Az4B/wMAAf8DAAH/Az4B/1AAA8IB/wM+Af8DPgH/A8IB/zAAA8IB/wOCAf8DXgH/
A8IB/wM+Af8DAAH/AwAB/wM+Af8gAAPCAf8DkgH/A5IB/wPCAf8DggH/Az4B/wM+Af8DXgH/A8IB
/wM+Af8DPgH/A8IB/6AAAz4B/wMAAf8DAAH/Az4B/zAAA14B/wM+Af8DPgH/A4IB/7AAA8IB/wM+
Af8DPgH/A8IB/zAAA8IB/wOCAf8DXgH/A8IB/xgAAUIBTQE+BwABPgMAASgDAAFAAwABMAMAAQEB
AAEBBQABgAEBFgAD/4EABP8B/AE/AfwBPwT/AfwBPwH8AT8D/wHDAfwBAwHAASMD/wHDAfwBAwHA
AQMD/wHDAf8DwwP/AcMB/wPDAf8B8AH/AfAB/wHwAf8B+QH/AfAB/wHwAf8B8AH/AfAB/wHwAf8B
8AH/AfAB/wHwAf8B8AH/AfAB/wHwAf8B+QHnAcMB/wHDAf8B5wL/AsMB/wHDAf8BwwL/AcABAwH+
AUMB/wHDAv8B5AEDAfwBAwH/AecC/wH8AT8B/AE/BP8B/AE/Af4BfwT/AfwBPwH+AX8E/wH8AT8B
/AE/BP8BwAEnAcABPwHnA/8BwAEDAcIBfwHDA/8DwwH/AcMD/wHDAecBwwH/AecD/wEPAf8BDwH/
AQ8B/wGfAf8BDwH/AQ8B/wEPAf8BDwH/AQ8B/wEPAf8BDwH/AQ8B/wEPAf8BDwH/AQ8B/wGfA/8B
wwH/AcMB/wLDAv8BwwH/AcMB/wLDAv8BwwH/AcABPwHAAQMC/wHDAf8BwAE/AcABAwT/AfwBPwH8
AT8E/wH8AT8B/AE/Cw=='))
	#endregion
	$imagelistButtonBusyAnimation.ImageStream = $Formatter_binaryFomatter.Deserialize($System_IO_MemoryStream)
	$Formatter_binaryFomatter = $null
	$System_IO_MemoryStream = $null
	$imagelistButtonBusyAnimation.TransparentColor = 'Transparent'
	#
	# timerProcessTracker
	#
	$timerProcessTracker.add_Tick($timerProcessTracker_Tick)
	$formLogOutput.ResumeLayout()
	#endregion Generated Form Code

	#----------------------------------------------

	#Save the initial state of the form
	$InitialFormWindowState = $formLogOutput.WindowState
	#Init the OnLoad event to correct the initial state of the form
	$formLogOutput.add_Load($Form_StateCorrection_Load)
	#Clean up the control events
	$formLogOutput.add_FormClosed($Form_Cleanup_FormClosed)
	#Store the control values when form is closing
	$formLogOutput.add_Closing($Form_StoreValues_Closing)
	#Show the Form
	return $formLogOutput.ShowDialog()

}
#endregion Source: RaceDBLog.psf

#region Source: RaceDBPreferences.psf
function Show-RaceDBPreferences_psf
{
#region File Recovery Data (DO NOT MODIFY)
<#RecoveryData:
AgUAAB+LCAAAAAAABABllEevo1gQhfdI/g+t3iI1OUlvWiKYYJLBBOMd4Eu8BJNs+PXzpmcz0tTq
qHTOokpH35cP8mED066kS/rjW8z10P/1k/pF/Px9Qn78+HKnuqz7FKo1BE7agd9+mgNFuk6gABPo
czD/GufiC/uf709aHabu93JRIuIFEyDZoii7iiz+O5KoPGNnWclW9IoUCwtO4XE5D2fDVl6GFAYX
yWvfiRSkMTpYoVDdiE5lqbsJgumEuOSq54oWOr4aTg9xzmz00T1wJqd1tsTyoJBaguL4o9FHNuEb
qEtTl0jw0qmEMOxHubHmpFTgENThfUKECX9pBl8a8/gYqE8UjqhM52nViCGu2f6ttaRS0IxtvDJ9
LHKMqjbKi7gZ9DFT0Uqyihm9jsBLulSHJ2RNxMIwFOYs99G4qtdUasqSzsa8TlRlt4/cr55c2aLS
rt0tQbpupXCQyQsy2huWhCXA3LjbN97PxRY9IXJINqt6ie9ay40KGReuHJydEZfa91OtSMb0m3gJ
OLwvn6XTLHTzshOHDUTGEFGDl1dYrloR24WUdsYJWbLS8MSjteGtY0VTduqw0j+8SjG22qeaoEK+
bA3P142nB6til1Khy/fC8omzckuCmU8q89VbU9I1339rLFpMzuDjEZUxCzCL+XedjYJHJxut357S
Z9Z8AIft0hsTftXk9WaDSgNbp0oP7WaM/dEpV+FuibHRnRBVWk33snKWK7vo7jtlZI+aFc6Cx8PC
/qdHwXePXH7Zh5Rur/UzasXdNjIddOdz0PGo/5J28nlcreF+QsrWosQUv+xzohsw38b18Bh6utVd
hD+nh7G4108VTLwgfPg4LYp5s2DBg9kp3fk8cpG1xnVpOVcwXc8nJEqPpxyrjayYoAkegKt8nhv3
bkCb2QxxnRxEnkkJlGlR2r7MS9PXOafjbN95evhJ78doo75bb+T9oE9Iby5bbEZTYNZLKHhjLqQ9
vj+cT3gO3OWT52w6U0GCtk7PD2zCrcWm3av46hjjpTsfuLppvVUKEVFy1Qlx6M690R5GeUdl6v0e
QZY7Y3IPySreGvP8efbb01mpRhO9krAzOJBTN5GUjX4g5XMW2lDW/NRi9eWAE4KmhUoMPrbXbqO8
febhVpywgMfLNS7veLtT/rXAs8yOcci+QTxRJKRWjrSmiCYb+H1whxE3SIVjLxInBEPNCLvH9ZsU
lx5jMSFcVUMWmueYbD6HPjK/FVh0hH12Ycc7J8z0dmdH9LyzAniBiGcJsOTzxI4xNZ4QRozsmiwm
KTyyIZmvW02S2bLPW5s5FMe4FRPR57cofmF/0PMHQuI8gy6DNZh/YN+bL+y/zPv9N52GWkcCBQAA#>
#endregion
	#----------------------------------------------
	#region Import the Assemblies
	#----------------------------------------------
	[void][reflection.assembly]::Load('System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][reflection.assembly]::Load('System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
	#endregion Import Assemblies

	#----------------------------------------------
	#region Generated Form Objects
	#----------------------------------------------
	[System.Windows.Forms.Application]::EnableVisualStyles()
	$preferencesForm = New-Object 'System.Windows.Forms.Form'
	$labelTimezone = New-Object 'System.Windows.Forms.Label'
	$textboxTimeZone = New-Object 'System.Windows.Forms.TextBox'
	$buttonSave = New-Object 'System.Windows.Forms.Button'
	$checkboxRFIDEnabled = New-Object 'System.Windows.Forms.CheckBox'
	$labelRFDIIP = New-Object 'System.Windows.Forms.Label'
	$textboxRFIDIP = New-Object 'System.Windows.Forms.TextBox'
	$buttonCancel = New-Object 'System.Windows.Forms.Button'
	$InitialFormWindowState = New-Object 'System.Windows.Forms.FormWindowState'
	#endregion Generated Form Objects

	#----------------------------------------------
	# User Generated Script
	#----------------------------------------------
	
	$preferencesForm_Load={
		$rfidreaderipline = Get-Content -Path "racedb.env" | Where-Object { $_ -match "^RFID_READER_HOST=.*" }
		if ($rfidreaderipline)
		{
			$rfidreaderipitem = $rfidreaderipline.split("=")
			$rfidreaderip = $rfidreaderipitem[1]
		}
		$timezoneline = Get-Content -Path "racedb.env" | Where-Object { $_ -match "^TIME_ZONE=.*" }
		if ($timezoneline)
		{
			$timezoneitem = $timezoneline.split("=")
			$timezone = $timezoneitem[1]
		}
		else
		{
			$timezone = "America/Toronto"
		}
		
		Write-Host "RFIDIP $rfidreaderip"
		Write-Host "Timezone $timezone"
		if ($rfidreaderip)
		{
			$checkboxRFIDEnabled.Checked = $true
			$textboxRFIDIP.Text = $rfidreaderip
		}
		else
		{
			$checkboxRFIDEnabled.Checked = $false
			$textboxRFIDIP.Enabled = $false
			$textboxRFIDIP.Clear()
		}
		$textboxTimeZone.Text = $timezone
	}
	
	$checkboxRFIDEnabled_CheckedChanged={
		if ($checkboxRFIDEnabled.Checked)
		{
			$textboxRFIDIP.Enabled = $true
			if (!$textboxRFIDIP.Text)
			{
				$buttonSave.Enabled = $false
			}
			
		}
		else
		{
			$textboxRFIDIP.Enabled = $false
			$buttonSave.Enabled = $true
		}
		
	}
	
	$buttonSave_Click = {
		$RFIDIP = ''
		if ($checkboxRFIDEnabled.Checked)
		{
			$RFIDIP = $textboxRFIDIP.Text
		}
		$timezone = $textboxTimeZone.Text
		Copy-Item "racedb.env" -Destination "racedb.env.bak"
		Set-Content "racedb.env" -Value "TIMEZONE=$timezone"
		if ($checkboxRFIDEnabled.Enabled)
		{
			Add-Content "racedb.env" -Value "RFID_READER_HOST=$RFIDIP"
		}
		
	}
	
	$textboxRFIDIP_TextChanged = {
		$pattern = "^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$"
		if ($textboxRFIDIP.Text -match $pattern)
		{
			$buttonSave.Enabled = $true
		}
		else
		{
			$buttonSave.Enabled = $false
		}
	}
	
	$textboxTimeZone_TextChanged={
		if ($textboxTimeZone.Text)
		{
			$buttonSave.Enabled = $true
		}
		else
		{
			$buttonSave.Enabled = $false
		}
		
	}
	
	# --End User Generated Script--
	#----------------------------------------------
	#region Generated Events
	#----------------------------------------------
	
	$Form_StateCorrection_Load=
	{
		#Correct the initial state of the form to prevent the .Net maximized form issue
		$preferencesForm.WindowState = $InitialFormWindowState
	}
	
	$Form_StoreValues_Closing=
	{
		#Store the control values
		$script:RaceDBPreferences_textboxTimeZone = $textboxTimeZone.Text
		$script:RaceDBPreferences_checkboxRFIDEnabled = $checkboxRFIDEnabled.Checked
		$script:RaceDBPreferences_textboxRFIDIP = $textboxRFIDIP.Text
	}

	
	$Form_Cleanup_FormClosed=
	{
		#Remove all event handlers from the controls
		try
		{
			$textboxTimeZone.remove_TextChanged($textboxTimeZone_TextChanged)
			$buttonSave.remove_Click($buttonSave_Click)
			$checkboxRFIDEnabled.remove_CheckedChanged($checkboxRFIDEnabled_CheckedChanged)
			$textboxRFIDIP.remove_TextChanged($textboxRFIDIP_TextChanged)
			$preferencesForm.remove_Load($preferencesForm_Load)
			$preferencesForm.remove_Load($Form_StateCorrection_Load)
			$preferencesForm.remove_Closing($Form_StoreValues_Closing)
			$preferencesForm.remove_FormClosed($Form_Cleanup_FormClosed)
		}
		catch { Out-Null <# Prevent PSScriptAnalyzer warning #> }
	}
	#endregion Generated Events

	#----------------------------------------------
	#region Generated Form Code
	#----------------------------------------------
	$preferencesForm.SuspendLayout()
	#
	# preferencesForm
	#
	$preferencesForm.Controls.Add($labelTimezone)
	$preferencesForm.Controls.Add($textboxTimeZone)
	$preferencesForm.Controls.Add($buttonSave)
	$preferencesForm.Controls.Add($checkboxRFIDEnabled)
	$preferencesForm.Controls.Add($labelRFDIIP)
	$preferencesForm.Controls.Add($textboxRFIDIP)
	$preferencesForm.Controls.Add($buttonCancel)
	$preferencesForm.AcceptButton = $buttonCancel
	$preferencesForm.AutoScaleDimensions = '6, 13'
	$preferencesForm.AutoScaleMode = 'Font'
	$preferencesForm.ClientSize = '284, 262'
	$preferencesForm.FormBorderStyle = 'FixedDialog'
	$preferencesForm.MaximizeBox = $False
	$preferencesForm.MinimizeBox = $False
	$preferencesForm.Name = 'preferencesForm'
	$preferencesForm.StartPosition = 'CenterScreen'
	$preferencesForm.Text = 'Preferences'
	$preferencesForm.add_Load($preferencesForm_Load)
	#
	# labelTimezone
	#
	$labelTimezone.AutoSize = $True
	$labelTimezone.Location = '57, 93'
	$labelTimezone.Name = 'labelTimezone'
	$labelTimezone.Size = '54, 17'
	$labelTimezone.TabIndex = 6
	$labelTimezone.Text = 'Timezone'
	$labelTimezone.UseCompatibleTextRendering = $True
	#
	# textboxTimeZone
	#
	$textboxTimeZone.Location = '117, 93'
	$textboxTimeZone.Name = 'textboxTimeZone'
	$textboxTimeZone.Size = '100, 20'
	$textboxTimeZone.TabIndex = 5
	$textboxTimeZone.add_TextChanged($textboxTimeZone_TextChanged)
	#
	# buttonSave
	#
	$buttonSave.Anchor = 'Bottom, Right'
	$buttonSave.DialogResult = 'OK'
	$buttonSave.Location = '103, 227'
	$buttonSave.Name = 'buttonSave'
	$buttonSave.Size = '75, 23'
	$buttonSave.TabIndex = 4
	$buttonSave.Text = '&Save'
	$buttonSave.UseCompatibleTextRendering = $True
	$buttonSave.UseVisualStyleBackColor = $True
	$buttonSave.add_Click($buttonSave_Click)
	#
	# checkboxRFIDEnabled
	#
	$checkboxRFIDEnabled.Location = '26, 25'
	$checkboxRFIDEnabled.Name = 'checkboxRFIDEnabled'
	$checkboxRFIDEnabled.Size = '152, 24'
	$checkboxRFIDEnabled.TabIndex = 3
	$checkboxRFIDEnabled.Text = 'RFID Reader Enabled'
	$checkboxRFIDEnabled.UseCompatibleTextRendering = $True
	$checkboxRFIDEnabled.UseVisualStyleBackColor = $True
	$checkboxRFIDEnabled.add_CheckedChanged($checkboxRFIDEnabled_CheckedChanged)
	#
	# labelRFDIIP
	#
	$labelRFDIIP.AutoSize = $True
	$labelRFDIIP.Location = '27, 58'
	$labelRFDIIP.Name = 'labelRFDIIP'
	$labelRFDIIP.Size = '84, 17'
	$labelRFDIIP.TabIndex = 2
	$labelRFDIIP.Text = 'RFID Reader IP'
	$labelRFDIIP.UseCompatibleTextRendering = $True
	#
	# textboxRFIDIP
	#
	$textboxRFIDIP.Location = '117, 55'
	$textboxRFIDIP.Name = 'textboxRFIDIP'
	$textboxRFIDIP.Size = '100, 20'
	$textboxRFIDIP.TabIndex = 1
	$textboxRFIDIP.add_TextChanged($textboxRFIDIP_TextChanged)
	#
	# buttonCancel
	#
	$buttonCancel.Anchor = 'Bottom, Right'
	$buttonCancel.DialogResult = 'Cancel'
	$buttonCancel.Location = '197, 227'
	$buttonCancel.Name = 'buttonCancel'
	$buttonCancel.Size = '75, 23'
	$buttonCancel.TabIndex = 0
	$buttonCancel.Text = '&Cancel'
	$buttonCancel.UseCompatibleTextRendering = $True
	$buttonCancel.UseVisualStyleBackColor = $True
	$preferencesForm.ResumeLayout()
	#endregion Generated Form Code

	#----------------------------------------------

	#Save the initial state of the form
	$InitialFormWindowState = $preferencesForm.WindowState
	#Init the OnLoad event to correct the initial state of the form
	$preferencesForm.add_Load($Form_StateCorrection_Load)
	#Clean up the control events
	$preferencesForm.add_FormClosed($Form_Cleanup_FormClosed)
	#Store the control values when form is closing
	$preferencesForm.add_Closing($Form_StoreValues_Closing)
	#Show the Form
	return $preferencesForm.ShowDialog()

}
#endregion Source: RaceDBPreferences.psf

#region Source: RaceDBUpdate2.psf
function Show-RaceDBUpdate2_psf
{
#region File Recovery Data (DO NOT MODIFY)
<#RecoveryData:
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#>
#endregion
	#----------------------------------------------
	#region Import the Assemblies
	#----------------------------------------------
	[void][reflection.assembly]::Load('System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][reflection.assembly]::Load('System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
	#endregion Import Assemblies

	#----------------------------------------------
	#region Generated Form Objects
	#----------------------------------------------
	[System.Windows.Forms.Application]::EnableVisualStyles()
	$formUpdate = New-Object 'System.Windows.Forms.Form'
	$buttonRunUpdate = New-Object 'System.Windows.Forms.Button'
	$richtextboxOutput = New-Object 'System.Windows.Forms.RichTextBox'
	$buttonClose = New-Object 'System.Windows.Forms.Button'
	$imagelistButtonBusyAnimation = New-Object 'System.Windows.Forms.ImageList'
	$timerProcessTracker = New-Object 'System.Windows.Forms.Timer'
	$InitialFormWindowState = New-Object 'System.Windows.Forms.FormWindowState'
	#endregion Generated Form Objects

	#----------------------------------------------
	# User Generated Script
	#----------------------------------------------
	
	 
	#region FindFunction
	function FindText
	{	
		if($textboxFind.Text.Length -eq 0)
		{
			return
		}
		
		$index = $richtextboxOutput.Find($textboxFind.Text,$richtextboxOutput.SelectionStart+ $richtextboxOutput.SelectedText.Length,[System.Windows.Forms.RichTextBoxFinds]::None)
		if($index -ge 0)
		{	
			$richtextboxOutput.Select($index,$textboxFind.Text.Length)
			$richtextboxOutput.ScrollToCaret()
			#$richtextbox1.Focus()
		}
		else
		{
			$index = $richtextboxOutput.Find($textboxFind.Text,0,$richtextboxOutput.SelectionStart,[System.Windows.Forms.RichTextBoxFinds]::None)
			#
			if($index -ge 0)
			{	
				$richtextboxOutput.Select($index,$textboxFind.Text.Length)
				$richtextboxOutput.ScrollToCaret()
				#$richtextbox1.Focus()
			}
			else
			{
				$richtextboxOutput.SelectionStart = 0
			}
		}
		
	}
	#endregion
	
	$formUpdate_Load={
		$richtextboxOutput.Text = "By clicking Update, the current version of the RaceDB container will be pulled from hub.docker.com. If there is a newer version, it will be downloaded to your machine. You must restart RaceDB to use the new version. You will not lose any settings or data by updating."
	
	}
	
	$buttonClose_Click={
		#TODO: Place custom script here
		$formUpdate.Close()
	}
	
	$textboxFind_TextChanged={
		$buttonFind.Enabled = $textboxFind.Text.Length -gt 0
	}
	
	$processTracker_FormClosed=[System.Windows.Forms.FormClosedEventHandler]{
	#Event Argument: $_ = [System.Windows.Forms.FormClosedEventArgs]
		#Stop any pending processes
		#Stop-ProcessTracker
	}
	
	$buttonRunUpdate_Click= {
		$buttonRunUpdate.Enabled = $false
		
		#Clear the output
		$richtextboxOutput.Clear()
	
		#TODO: Set the process path here
		$paramAddProcessTracker = @{
			FilePath						  = 'docker-compose'
			Arguments						  = '--no-ansi pull'
			SyncObject						  = $buttonRunUpdate
			RedirectOutputScript			  = {
				# Use $_.Data to access the output text
				$richtextboxOutput.AppendText($_.Data)
				$richtextboxOutput.AppendText("`r`n")
			}
			RedirectErrorScript					  = {
				if ($_.Data)
				{
					# Use $_.Data to access the output text
					# Use red to display errors
					$colorOld = $richtextboxOutput.SelectionColor;
					$richtextboxOutput.SelectionColor = 'Red'
					$richtextboxOutput.AppendText($_.Data)
					$richtextboxOutput.AppendText("`r`n")
					$richtextboxOutput.SelectionColor = $colorOld
				}
			}
			CompletedScript				      = {
				$buttonRunUpdate.Enabled = $true
				$buttonRunUpdate.ImageIndex = -1
			}
			UpdateScript					  = {
				#Animate the Button
				if ($null -ne $buttonRunUpdate.ImageList)
				{
					if ($buttonRunUpdate.ImageIndex -lt $buttonRunUpdate.ImageList.Images.Count - 1)
					{
						$buttonRunUpdate.ImageIndex += 1
					}
					else
					{
						$buttonRunUpdate.ImageIndex = 0
					}
				}
			}
		}
		
		Add-ProcessTracker @paramAddProcessTracker
		
	}
	
	$timerProcessTracker_Tick={
		Update-ProcessTracker
	}
	
	#region Process Tracker
	function Stop-ProcessTracker
	{
		<#
			.SYNOPSIS
				Stops and removes all processes from the list.
		#>
		#Stop the timer
		$timerProcessTracker.Stop()
		
		#Remove all the processes
		while($ProcessTrackerList.Count -gt 0)
		{
			$process = $ProcessTrackerList[0].Process
			$ProcessTrackerList.RemoveAt(0)
			if(-not $process.HasExited)
			{
				Stop-Process -InputObject $process
			}
		}
	}
	
	function Update-ProcessTracker
	{
		<#
			.SYNOPSIS
				Checks the status of each job on the list.
		#>
		
		#Poll the jobs for status updates
		$timerProcessTracker.Stop() #Freeze the Timer
		
		for($index =0; $index -lt $ProcessTrackerList.Count; $index++)
		{
			$psObject = $ProcessTrackerList[$index]
			
			if($null -ne $psObject) 
			{
				if($null -ne $psObject.Process)
				{
					if($psObject.Process.HasExited)
					{
						#Call the Complete Script Block
						if($null -ne $psObject.CompleteScript)
						{
							#$results = Receive-Job -Job $psObject.Job
							Invoke-Command -ScriptBlock $psObject.CompleteScript -ArgumentList $psObject.Process
						}
						
						$ProcessTrackerList.RemoveAt($index)
						$index-- #Step back so we don't skip a job
					}
					elseif($null -ne $psObject.UpdateScript)
					{
						#Call the Update Script Block
						Invoke-Command -ScriptBlock $psObject.UpdateScript -ArgumentList $psObject.Process
					}
				}
			}
			else
			{
				$ProcessTrackerList.RemoveAt($index)
				$index-- #Step back so we don't skip a job
			}
		}
		
		if($ProcessTrackerList.Count -gt 0)
		{
			$timerProcessTracker.Start()#Resume the timer
		}
	}
	
	$ProcessTrackerList = New-Object System.Collections.ArrayList
	function Add-ProcessTracker
	{
		<#
			.SYNOPSIS
				Add a new process to the ProcessTracker and starts the timer.
		
			.DESCRIPTION
				Add a new process to the ProcessTracker and starts the timer.
		
			.PARAMETER  FilePath
				The path to executable.
		
			.PARAMETER ArgumentList
				The arguments to pass to the process.
		
			.PARAMETER CompletedScript
				The script block that will be called when the process is complete.
				The process is passed as an argument. The process argument is null when the job fails.
		
			.PARAMETER UpdateScript
				The script block that will be called each time the timer ticks.
				The process is passed as an argument.
		
			.PARAMETER RedirectOutputScript
				The script block that handles output from the process.
				Use $_.Data to access the output text.
		
			.PARAMETER RedirectErrorScript
				The script block that handles error output from the process.
				Use $_.Data to access the output text.
		
			.PARAMETER NoNewWindow
				Start the new process in the current console window.
		
			.PARAMETER WindowStyle
				Specifies the state of the window that is used for the new process. 
				Valid values are Normal, Hidden, Minimized, and Maximized. 
				The default value is Normal.
		
			.PARAMETER WorkingDirectory
				Specifies the location of the executable file or document that runs in the process. 
				The default is the current directory.
		
			.PARAMETER RedirectInput
				Redirects the input of the process. If this switch is set, the function will return the process object.
				Use the process object's StandardInput property to access the input stream.
		
			.PARAMETER PassThru
				Returns the process that was started.
		
			.PARAMETER SyncObject
				The object used to marshal the process event handler calls that are issued.
				You must pass a control to sync otherwise it will produce an error when redirecting output.
	
			.EXAMPLE
				 Add-ProcessTracker -FilePath 'notepad.exe' `
				-SyncObject $form1 `
				-CompletedScript {
					Param([System.Diagnostics.Process]$Process)
					$button.Enable = $true
				}`
				-UpdateScript {
					Param([System.Diagnostics.Process]$Process)
					Function-Animate $button
				}`
				-RedirectOutputScript { 
				# Use $_.Data to access the output text
					$textBox1.AppendText($_.Data)
					$textBox1.AppendText("`r`n")
				}
			.EXAMPLE
				$process = Add-ProcessTracker -FilePath 'powershell.exe' `
				-RedirectInput `
				-SyncObject $buttonRunProcess `
				-RedirectOutputScript {
					# Use $_.Data to access the output text
					$richtextbox1.AppendText($_.Data)
					$richtextbox1.AppendText("`r`n")
				}
				
				#Write to the console
				$process.StandardInput.WriteLine("Get-Process")
		
			.OUTPUTS
				 System.Diagnostics.Process
		#>
		
		[OutputType([System.Diagnostics.Process])]
		Param (
			[ValidateNotNull()]
			[Parameter(Mandatory = $true)]
			[string]$FilePath,
			[string]$Arguments,
			[string]$WorkingDirectory,
			[Parameter(Mandatory = $true)]
			[ValidateNotNull()]
			[System.ComponentModel.ISynchronizeInvoke]$SyncObject,
			[ScriptBlock]$CompletedScript,
			[ScriptBlock]$UpdateScript,
			[ScriptBlock]$RedirectOutputScript,
			[ScriptBlock]$RedirectErrorScript,
			[System.Diagnostics.ProcessWindowStyle]$WindowStyle = 'Normal',
			[switch]$RedirectInput,
			[switch]$NoNewWindow,
			[switch]$PassThru
		)
		
		#Start the Process
		try
		{
			$process = New-Object System.Diagnostics.Process
			$process.StartInfo.FileName = $FilePath
			$process.StartInfo.WindowStyle = $WindowStyle
			
			if ($NoNewWindow)
			{
				$process.StartInfo.CreateNoWindow = $true
			}
			
			if ($WorkingDirectory)
			{
			 	$process.StartInfo.WorkingDirectory = $WorkingDirectory
			}
			
			#Handle Redirection
			if ($RedirectErrorScript)
			{
				$process.EnableRaisingEvents = $true
				$process.StartInfo.UseShellExecute = $false
				$process.StartInfo.RedirectStandardError = $true
				$process.StartInfo.CreateNoWindow = $true
				$process.add_ErrorDataReceived($RedirectErrorScript)
			}
			
			if ($RedirectOutputScript)
			{
				$process.StartInfo.UseShellExecute = $false
				$process.StartInfo.RedirectStandardOutput = $true
				$process.add_OutputDataReceived($RedirectOutputScript)
			}
			
			if($RedirectInput)
			{
				$process.EnableRaisingEvents = $true
				$process.StartInfo.UseShellExecute = $false
				$process.StartInfo.CreateNoWindow = $true
				$process.StartInfo.RedirectStandardInput = $true
				$PassThru = $true #Force the object to return
			}
			
			#Pass the arguments and sync with the form
			$process.StartInfo.Arguments = $Arguments
			$process.SynchronizingObject = $SyncObject
			$process.Start() | Out-Null
			
			#Begin the redirect reads
			if ($RedirectOutputScript)
			{
				$process.BeginOutputReadLine()
			}
			
			if ($RedirectErrorScript)
			{
				$process.BeginErrorReadLine()
			}
		}
		catch
		{
			Write-Error $_.Exception.Message
			$process = $null
		}
		
		if ($null -ne $process)
		{
			#Create a Custom Object to keep track of the Job & Script Blocks
			$members = @{
				"Process"	     = $process;
				"CompleteScript" = $CompletedScript;
				"UpdateScript"   = $UpdateScript
			}
			
			$psObject = New-Object System.Management.Automation.PSObject -Property $members
			
			[void]$ProcessTrackerList.Add($psObject)
			
			#Start the Timer
			if (-not $timerProcessTracker.Enabled)
			{
				$timerProcessTracker.Start()
			}
				
			#Return the process if using PassThru
			if ($PassThru)
			{
				return $process	
			}
		}
		elseif ($null -ne $CompletedScript)
		{
			#Failed
			Invoke-Command -ScriptBlock $CompletedScript -ArgumentList $null
		}
		
	}
	#endregion
	
	# --End User Generated Script--
	#----------------------------------------------
	#region Generated Events
	#----------------------------------------------
	
	$Form_StateCorrection_Load=
	{
		#Correct the initial state of the form to prevent the .Net maximized form issue
		$formUpdate.WindowState = $InitialFormWindowState
	}
	
	$Form_StoreValues_Closing=
	{
		#Store the control values
		$script:RaceDBUpdate2_richtextboxOutput = $richtextboxOutput.Text
	}

	
	$Form_Cleanup_FormClosed=
	{
		#Remove all event handlers from the controls
		try
		{
			$buttonRunUpdate.remove_Click($buttonRunUpdate_Click)
			$buttonClose.remove_Click($buttonClose_Click)
			$formUpdate.remove_FormClosed($processTracker_FormClosed)
			$formUpdate.remove_Load($formUpdate_Load)
			$timerProcessTracker.remove_Tick($timerProcessTracker_Tick)
			$formUpdate.remove_Load($Form_StateCorrection_Load)
			$formUpdate.remove_Closing($Form_StoreValues_Closing)
			$formUpdate.remove_FormClosed($Form_Cleanup_FormClosed)
		}
		catch { Out-Null <# Prevent PSScriptAnalyzer warning #> }
	}
	#endregion Generated Events

	#----------------------------------------------
	#region Generated Form Code
	#----------------------------------------------
	$formUpdate.SuspendLayout()
	#
	# formUpdate
	#
	$formUpdate.Controls.Add($buttonRunUpdate)
	$formUpdate.Controls.Add($richtextboxOutput)
	$formUpdate.Controls.Add($buttonClose)
	$formUpdate.AutoScaleDimensions = '6, 13'
	$formUpdate.AutoScaleMode = 'Font'
	$formUpdate.ClientSize = '720, 361'
	$formUpdate.Margin = '4, 4, 4, 4'
	$formUpdate.MinimumSize = '304, 315'
	$formUpdate.Name = 'formUpdate'
	$formUpdate.StartPosition = 'CenterScreen'
	$formUpdate.Text = 'Update RaceDB'
	$formUpdate.add_FormClosed($processTracker_FormClosed)
	$formUpdate.add_Load($formUpdate_Load)
	#
	# buttonRunUpdate
	#
	$buttonRunUpdate.Anchor = 'Bottom, Left'
	$buttonRunUpdate.ImageList = $imagelistButtonBusyAnimation
	$buttonRunUpdate.Location = '552, 326'
	$buttonRunUpdate.Name = 'buttonRunUpdate'
	$buttonRunUpdate.Size = '75, 23'
	$buttonRunUpdate.TabIndex = 1
	$buttonRunUpdate.Text = '&Update'
	$buttonRunUpdate.TextImageRelation = 'ImageBeforeText'
	$buttonRunUpdate.UseCompatibleTextRendering = $True
	$buttonRunUpdate.UseVisualStyleBackColor = $True
	$buttonRunUpdate.add_Click($buttonRunUpdate_Click)
	#
	# richtextboxOutput
	#
	$richtextboxOutput.Anchor = 'Top, Bottom, Left, Right'
	$richtextboxOutput.BackColor = 'Window'
	$richtextboxOutput.Font = 'Courier New, 8.25pt'
	$richtextboxOutput.HideSelection = $False
	$richtextboxOutput.Location = '12, 36'
	$richtextboxOutput.Name = 'richtextboxOutput'
	$richtextboxOutput.ReadOnly = $True
	$richtextboxOutput.Size = '695, 280'
	$richtextboxOutput.TabIndex = 2
	$richtextboxOutput.Text = ''
	#
	# buttonClose
	#
	$buttonClose.Anchor = 'Bottom, Right'
	$buttonClose.Location = '633, 326'
	$buttonClose.Name = 'buttonClose'
	$buttonClose.Size = '75, 23'
	$buttonClose.TabIndex = 0
	$buttonClose.Text = '&Close'
	$buttonClose.UseCompatibleTextRendering = $True
	$buttonClose.UseVisualStyleBackColor = $True
	$buttonClose.add_Click($buttonClose_Click)
	#
	# imagelistButtonBusyAnimation
	#
	$Formatter_binaryFomatter = New-Object System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
	#region Binary Data
	$System_IO_MemoryStream = New-Object System.IO.MemoryStream (,[byte[]][System.Convert]::FromBase64String('
AAEAAAD/////AQAAAAAAAAAMAgAAAFdTeXN0ZW0uV2luZG93cy5Gb3JtcywgVmVyc2lvbj00LjAu
MC4wLCBDdWx0dXJlPW5ldXRyYWwsIFB1YmxpY0tleVRva2VuPWI3N2E1YzU2MTkzNGUwODkFAQAA
ACZTeXN0ZW0uV2luZG93cy5Gb3Jtcy5JbWFnZUxpc3RTdHJlYW1lcgEAAAAERGF0YQcCAgAAAAkD
AAAADwMAAAB2CgAAAk1TRnQBSQFMAgEBCAEAAWABAAFgAQABEAEAARABAAT/ASEBAAj/AUIBTQE2
BwABNgMAASgDAAFAAwABMAMAAQEBAAEgBgABMP8A/wD/AP8A/wD/AP8A/wD/AP8A/wD/AP8A/wD/
AP8AugADwgH/Az4B/wM+Af8DwgH/MAADwgH/A14B/wOCAf8DwgH/sAADPgH/AwAB/wMAAf8DPgH/
MAADggH/Az4B/wM+Af8DXgH/gAADwgH/Az4B/wM+Af8DwgH/IAADPgH/AwAB/wMAAf8DPgH/A8IB
/wNeAf8DggH/A8IB/xAAA8IB/wM+Af8DPgH/A8IB/wNeAf8DPgH/Az4B/wNeAf8EAAOSAf8DkgH/
A8IB/3AAAz4B/wMAAf8DAAH/Az4B/yAAA8IB/wM+Af8DPgH/A8IB/wOCAf8DPgH/Az4B/wOCAf8Q
AAM+Af8DAAH/AwAB/wM+Af8DwgH/A14B/wOCAf8DwgH/A5IB/wOCAf8DggH/A5IB/3AAAz4B/wMA
Af8DAAH/Az4B/zAAA14B/wM+Af8DPgH/A14B/xAAAz4B/wMAAf8DAAH/Az4B/xAAA5IB/wOSAf8D
kgH/A8IB/3AAA8IB/wM+Af8DPgH/A8IB/zAAA8IB/wNeAf8DggH/A8IB/xAAA8IB/wM+Af8DPgH/
A8IB/xAAA8IB/wOSAf8DkgH/A8IB/zgAA8IB/wM+Af8DPgH/A8IB/zAAA8IB/wOCAf8DXgH/A8IB
/zAAA8IB/wPCAf8DkgH/A8IB/zQAA8IB/wPCAf80AAM+Af8DAAH/AwAB/wM+Af8wAANeAf8DPgH/
Az4B/wNeAf8wAAOSAf8DggH/A4IB/wOSAf8wAAPCAf8DwgH/A8IB/wPCAf8wAAM+Af8DAAH/AwAB
/wM+Af8wAAOCAf8DPgH/Az4B/wOCAf8wAAPCAf8DggH/A5IB/wOSAf8wAAPCAf8DwgH/A8IB/wPC
Af8wAAPCAf8DPgH/Az4B/wPCAf8wAAPCAf8DggH/A14B/wPCAf8wAAPCAf8DkgH/A5IB/wPCAf80
AAPCAf8DwgH/EAADwgH/A8IB/xQAA8IB/wOCAf8DXgH/A8IB/zAAA8IB/wOSAf8DkgH/A8IB/zQA
A8IB/wPCAf9UAAPCAf8DwgH/A8IB/wPCAf8QAANeAf8DPgH/Az4B/wNeAf8wAAOSAf8DggH/A5IB
/wOSAf8wAAPCAf8DwgH/A8IB/wPCAf9QAAPCAf8DwgH/A8IB/wPCAf8DwgH/A8IB/wOSAf8DwgH/
A4IB/wM+Af8DPgH/A4IB/yQAA8IB/wPCAf8EAAPCAf8DggH/A5IB/wOSAf8wAAPCAf8DwgH/A8IB
/wPCAf9UAAPCAf8DwgH/BAADkgH/A4IB/wOCAf8DkgH/A8IB/wOCAf8DXgH/A8IB/yAAA8IB/wPC
Af8DwgH/A8IB/wPCAf8DkgH/A5IB/wPCAf80AAPCAf8DwgH/ZAADkgH/A5IB/wOSAf8DkgH/MAAD
wgH/A8IB/wPCAf8DwgH/sAADwgH/A5IB/wOSAf8DwgH/NAADwgH/A8IB/7QAA8IB/wPCAf8DkgH/
A8IB/zQAA8IB/wPCAf+0AAOSAf8DggH/A4IB/wOSAf8wAAPCAf8DwgH/A8IB/wPCAf+gAAPCAf8D
XgH/A4IB/wPCAf8DkgH/A5IB/wOSAf8DwgH/BAADwgH/A8IB/xQAA8IB/wPCAf8DkgH/A8IB/wPC
Af8DwgH/A8IB/wPCAf8kAAPCAf8DwgH/dAADggH/Az4B/wM+Af8DggH/A8IB/wOSAf8DkgH/A8IB
/wPCAf8DwgH/A8IB/wPCAf8QAAOSAf8DggH/A4IB/wOSAf8EAAPCAf8DwgH/JAADwgH/A8IB/wPC
Af8DwgH/cAADXgH/Az4B/wM+Af8DggH/EAADwgH/A8IB/wPCAf8DwgH/EAADkgH/A5IB/wOSAf8D
kgH/MAADwgH/A8IB/wPCAf8DwgH/cAADwgH/A14B/wNeAf8DwgH/FAADwgH/A8IB/xQAA8IB/wOS
Af8DkgH/A8IB/zQAA8IB/wPCAf9sAAPCAf8DPgH/Az4B/wPCAf8wAAPCAf8DXgH/A4IB/wPCAf8w
AAPCAf8DwgH/A5IB/wPCAf80AAPCAf8DwgH/NAADPgH/AwAB/wMAAf8DPgH/MAADggH/Az4B/wM+
Af8DXgH/MAADkgH/A4IB/wOCAf8DkgH/MAADwgH/A8IB/wPCAf8DwgH/MAADPgH/AwAB/wMAAf8D
PgH/MAADXgH/Az4B/wM+Af8DggH/MAADkgH/A5IB/wOSAf8DkgH/MAADwgH/A8IB/wPCAf8DwgH/
MAADwgH/Az4B/wM+Af8DwgH/MAADwgH/A14B/wNeAf8DwgH/MAADwgH/A5IB/wOSAf8DwgH/NAAD
wgH/A8IB/3wAA8IB/wM+Af8DPgH/A8IB/zAAA8IB/wNeAf8DggH/A8IB/zAAA8IB/wPCAf8DkgH/
A8IB/xAAA8IB/wM+Af8DPgH/A8IB/1AAAz4B/wMAAf8DAAH/Az4B/zAAA4IB/wM+Af8DPgH/A14B
/zAAA5IB/wOCAf8DggH/A5IB/xAAAz4B/wMAAf8DAAH/Az4B/1AAAz4B/wMAAf8DAAH/Az4B/zAA
A14B/wM+Af8DPgH/A4IB/wOSAf8DPgH/Az4B/wPCAf8gAAOSAf8DkgH/A5IB/wOSAf8DwgH/A14B
/wOCAf8DwgH/Az4B/wMAAf8DAAH/Az4B/1AAA8IB/wM+Af8DPgH/A8IB/zAAA8IB/wOCAf8DXgH/
A8IB/wM+Af8DAAH/AwAB/wM+Af8gAAPCAf8DkgH/A5IB/wPCAf8DggH/Az4B/wM+Af8DXgH/A8IB
/wM+Af8DPgH/A8IB/6AAAz4B/wMAAf8DAAH/Az4B/zAAA14B/wM+Af8DPgH/A4IB/7AAA8IB/wM+
Af8DPgH/A8IB/zAAA8IB/wOCAf8DXgH/A8IB/xgAAUIBTQE+BwABPgMAASgDAAFAAwABMAMAAQEB
AAEBBQABgAEBFgAD/4EABP8B/AE/AfwBPwT/AfwBPwH8AT8D/wHDAfwBAwHAASMD/wHDAfwBAwHA
AQMD/wHDAf8DwwP/AcMB/wPDAf8B8AH/AfAB/wHwAf8B+QH/AfAB/wHwAf8B8AH/AfAB/wHwAf8B
8AH/AfAB/wHwAf8B8AH/AfAB/wHwAf8B+QHnAcMB/wHDAf8B5wL/AsMB/wHDAf8BwwL/AcABAwH+
AUMB/wHDAv8B5AEDAfwBAwH/AecC/wH8AT8B/AE/BP8B/AE/Af4BfwT/AfwBPwH+AX8E/wH8AT8B
/AE/BP8BwAEnAcABPwHnA/8BwAEDAcIBfwHDA/8DwwH/AcMD/wHDAecBwwH/AecD/wEPAf8BDwH/
AQ8B/wGfAf8BDwH/AQ8B/wEPAf8BDwH/AQ8B/wEPAf8BDwH/AQ8B/wEPAf8BDwH/AQ8B/wGfA/8B
wwH/AcMB/wLDAv8BwwH/AcMB/wLDAv8BwwH/AcABPwHAAQMC/wHDAf8BwAE/AcABAwT/AfwBPwH8
AT8E/wH8AT8B/AE/Cw=='))
	#endregion
	$imagelistButtonBusyAnimation.ImageStream = $Formatter_binaryFomatter.Deserialize($System_IO_MemoryStream)
	$Formatter_binaryFomatter = $null
	$System_IO_MemoryStream = $null
	$imagelistButtonBusyAnimation.TransparentColor = 'Transparent'
	#
	# timerProcessTracker
	#
	$timerProcessTracker.add_Tick($timerProcessTracker_Tick)
	$formUpdate.ResumeLayout()
	#endregion Generated Form Code

	#----------------------------------------------

	#Save the initial state of the form
	$InitialFormWindowState = $formUpdate.WindowState
	#Init the OnLoad event to correct the initial state of the form
	$formUpdate.add_Load($Form_StateCorrection_Load)
	#Clean up the control events
	$formUpdate.add_FormClosed($Form_Cleanup_FormClosed)
	#Store the control values when form is closing
	$formUpdate.add_Closing($Form_StoreValues_Closing)
	#Show the Form
	return $formUpdate.ShowDialog()

}
#endregion Source: RaceDBUpdate2.psf

#Start the application
Main ($CommandLine)
